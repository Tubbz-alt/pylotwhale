#!/usr/bin/python

import pylab as pl
import numpy as np
import os
import sys

sys.path.append('/home/florencia/whales/scripts/')
import pcaO

#import scikits.audiolab as al


def pcaCalcs(fileN, plBasis = 1, plWeights = 1, r_tresh = 0.99, sRate=192000):

    '''
    plots the average of the variance keept by the k-th PC
    
    fileN = ceps file (cols)time x ceps "<file>-ceps.dat"
    
    '''
    cepsM = np.loadtxt(fileN).T # time runns horizontally
    baseN = os.path.splitext(fileN)[0]
    print baseN
   
    N = len(cepsM.T) #time points
    tf = N/(1.0*sRate)
    
    pca = pcaO.pca0mean(cepsM.T) # vertical time

    if(plBasis):



#------------- plot basis ----------------------

        Tmatrix = pca.vectors()
        
        fig = pl.figure(figsize=(6,5))
        ax = fig.add_subplot(111)
        cax = pl.imshow(Tmatrix, extent=[1,128,1,128], interpolation = 'nearest', aspect ='auto')
        
        ax.set_xlabel( 'PC vector', fontsize=16 )
        ax.set_ylabel( 'cepstral coefficient ', fontsize=16 )
        ax.tick_params(axis='both', labelsize='x-large')  #set_xticks(ticks, fontsize=24)

   # Set x ticks
      #  pl.xticks(np.linspace(1,xM,xM,endpoint=True))
    
        outF = baseN+"PCbasis.png"
        print outF
        pl.savefig(outF)


#------------- plot weights ----------------------
    if(plWeights):
       
        vec = pca.weights()
        deno =  vec.sum()
       
        for i in np.arange(1,len(vec)):
            vec[i] = vec[i] + vec[i-1]# + vec[i] 
          
        vec /= deno
           
       # find i such that 99% of variance is preserved
        i=-1
        while True:
            i = i+1
            r = vec[i]
           # print i
            if ( r >= r_tresh):
                break
           
        # plot or spit
        if(i>1):
            pl.plot(vec[:i])
            pl.xlabel("PC index", fontsize=18)
            pl.ylabel("r", fontsize=18)
            pl.xticks(fontsize=18)
            pl.yticks(fontsize=18)
            pl.ylim(0,1)
            xM = len(vec[:i])-1
            pl.xticks(np.linspace(1,xM,xM,endpoint=True))
            print "i =", i, vec[i]
            
        else:
            print "i =", i, vec[i]
           
    outF = baseN+"PCweihgts.png"
    print outF
    pl.savefig(outF)



def 
